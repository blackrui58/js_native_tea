获取元素的方式:
1.document.getElementById(id值) : 一个元素值
2.document.getElementsByTagName(标签名) : 一个集合对象

js操作属性 box
1.设置属性
a.box.属性名 = 属性值
b.box['属性名'] = 属性值

2.获取属性
a.box.属性名
b.box['属性名']

+:
1.数学里面的加
2.连接符,当+左右两边有一个是字符串的时候

value : 表单元素的值
innerHTML : 双标元素的值

js的数据类型
number:  数字
string:  字符串  (有单引号或者是双引号的内容,value,innerHTML也是字符串)
boolean:  布尔值  (true  false)
undefined: 未定义的
function:  函数
object: 对象

操作符
typeof(你要判断的变量)
typeof 变量

number: 所有的数字都是number类型,NaN
NaN: not a number (值不是一个数字,但是属于数字类型)
Infinity:  正无穷
-Infinity: 负无穷

十进制数: 日常生活中看到的数字
八进制数: 0开头的数值 (0-7) 从右边开始算几次方,从0开始
011: 0 x 8^2 + 1 x 8^1 + 1 x 8^0 = 9
0711: 7 x 8 ^ 2 + 1 x 8^1 + 1 x 8^0 = 457

十六进制数: 0x开头的数值 (0-9 a,b,c,d,e,f)
0x111: 16 ^ 2 + 16 ^ 1 + 1 = 273

二进制数: 010101101

数据类型的转换
1.隐式转换: 数据在运算的过程中自己发生转换,不由程序员操作
2.显式转换 (强制转换): 由程序员强行将数据类型进行转换

强制转换:
数字转字符串:
String(变量值)
变量.toString();

字符串转数字:
Number(变量)
parseInt(变量) : 取整数部分
parseFloat(变量) : 整数 + 小数部分
保留几位小数: 数字类型的变量.toFixed(几位),可以四舍五入

其他数据类型转布尔类型
Boolean()
真假: 条件为真(true),条件为假(false)  非0即真
除了以下几种,其余的都是true
0  空字符串  undefined null false

判断是否是NaN:  isNaN(变量)


运算符: + - *  / %(模运算 | 求余运算) =  () 

模运算: 如果第一个数小于第二个数,那么结果就是第一个数
负数的求余,余数是正常,符号看第一个值,第一个值是负的,结果为负

复合运算符: += -= *= /= %=

num = num + 10;  num += 10
num = num - 10;  num -= 10
num = num * 10;  num *= 10
num = num / 10;  num /= 10
num = num % 10;  num %= 10

自增运算符 ++ 
a = a + 1; 等价于 a++; ++a;
自减运算符 -- 
a = a - 1; 等价于 a--; --a;

当自增运算符和其他运算符一起使用的时候
1.如果++(--)在后(a++)(a--),先赋值,再自增
2.如果++(--)在前(++a)(--a),先自增,在赋值

比较运算符: < > >= <= 

等于:
== : 不严格等于,只比较内容,不比较数据类型
=== : 严格等于,两个都比较
不等于:
!= : 
!== :

逻辑运算符: 或 ||  与 &&  非 ! 一般用来判断多个条件

为假:
0 false 空字符串 undefined null

为真: 1
为假: 0

或: 只要有一个条件成立,则结果为true
左右两边是数值,最后结果是这些数值的其中一个,就看第一个数值,第一个数值为真,最后结果就是第一个数,只有前面的数为假,才能是后面的数值

与: 必须所有的条件成功,结果才为真
左右两边是数值,从左往后,找是假的值,如果都为真,取最后一个

非: 求反  false  true   true  false

流程控制: 控制代码的执行顺序
1.顺序结构 : 代码从上往下执行
2.选择结构 : 有判断,根据判断结果走不同代码
3.循环结构 : 重复执行某些代码

选择结构:
if...else 语句
条件 --> 结果 (true  false)
if (条件) {
	代码; 条件成立的时候执行的代码
} else {
	代码; 条件不成立的时候执行的代码
}

循环结构: while  do..while  for
步骤:
1.初始化循环变量
2.判断循环条件
3.执行循环代码
4.更改循环变量的值

一定不能出现死循环,条件永远成立

while:

while (循环条件) {
	循环体  重复执行的吗 
}

do..while:

do {
	循环体
} while (循环条件);

区别: while先判断,再执行; do..while先执行一次,再判断

for

for (1;2;4) {
	3
}


this对象: 在一个事件,你点谁,移入谁,this-->谁