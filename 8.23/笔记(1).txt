jsopn: 跨域取数据
jsonp:
1.先把接口放到浏览器里面测试
2.手动写script标签
3.先全局的返回函数
4.解析数据
5.用完就移除

函数冲突.这两个函数都是全局函数

回调函数: 不由程序员去调用,自己在某个特定的时间去调用;不会停留在当前函数的调用里面;

程序:
异步: 一起; 当去执行一个事物的同时还可以进行另外一个事物
同步: 不一起;在上一个事物执行完毕,再执行下一个事物

在中文里面:
同步: 一起

有两件事情要做: 1.烧壶开水   2.浇花

同步: 先等水烧开,才能去浇花
异步: 烧着水的同时,浇花

同步锁
异步锁

get  post: 请求本地服务器的数据

jsonp: 跨域请求数据
-------------------------------------------------------------------

编程的思想: 
面向过程: 侧重点在过程,C语言; 一步出错,下面的所有的都错了
面向对象: 侧重点在对象,js,java,c++;只会影响该对象的使用,不会影响全局
只要在编程的过程中,使用到了对象,就是面向对象
只管用,不管实现;
arr,date对象
数组里面添加元素: arr.push(); oDate.getFullYear();

去下馆子?宫爆鸡丁

方便: 不需要管实现,只管用; 数组,时间,正则...

什么是对象? 万物皆对象 

怎么创建对象?  new 一个;

造飞机?
面向过程:
1.先造机头
2.再造机身
3.再造翅膀
4.再造轮子

面向对象:
1.先设计一张图纸
2.再按照图纸造飞机

对象是由图纸(类,构造函数)创建

var obj = new Object();
obj.属性名 = 属性值;  {}

二十三种设计模式：代理，工厂模式

创建对象的方式
工厂模式：
function createObj (name,age) {
	var obj = new Object();
	obj.name = name;
	obj.age = age;
	obj.eat = function () {
		alert(1);
	}
	return obj;
}
工厂： 原料  --->   加工  --->  出厂
	  obj           obj.name   return obj;
	  				obj.age
	  				obj.eat
1.复杂
2.方法不是开放的

构造函数创建对象:
function Person () {
	this.name = 'zs';
	this.age = 18;
	this.eat = function () {
		alert(1);
	}
}
只要是使用new Person()创建对象,做了以下几件事件:
1.自动帮我们在函数里面new 了 Object
2.将创建的对象的值 赋值给了this
3.return this
不好!
属性不同可以理解,但是方法没有必要每次都重新设置,因为方法是一样的

原型 + 构造函数的方式创建对象:

原型: 构造函数名.prototype,放对象的方法的

对象由构造函数(类)创建的

实例对象: var p = new Person();

对象的组成:
属性: 描述对象的某些信息
方法: 描述对象的行为

对象的属性方法只能由对象调

面向对象的三大特性:
1.封装: 把东西包裹起来; 只管使用,不管实现
2.继承
3.多态: js没有多态

继承: 一层层继承:

继承属性: 改变this的指向
Person(name,age): 错误
改变this的指向,this应该指向子对象

function show () {
	
}
show.call()
show.apply()
show.bind()
函数的方法:改变函数里面的this执行
call(): 
apply():
bind():
父对象的构造函数.apply(this,arguments);

函数的对象: arguments,实参的集合([])



继承方法